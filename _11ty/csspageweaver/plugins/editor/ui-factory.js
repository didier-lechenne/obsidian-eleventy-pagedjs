import { ACTIONS_REGISTRY, executeAction, isValidAction } from "./actions.js";

/**
 * @name UIFactory
 * @description Factory qui transforme les actions du registre en √©l√©ments d'interface
 *
 * Cette classe suit le pattern Factory, o√π une m√©thode centrale d√©cide
 * quel type d'√©l√©ment cr√©er selon le type de l'action demand√©e.
 *
 * Architecture: Action (registre) ‚Üí Factory ‚Üí ToolbarElement ‚Üí DOM
 */

export class UIFactory {
  /**
   * M√©thode principale qui cr√©e un √©l√©ment d'interface √† partir d'un ID d'action
   *
   * @param {string} actionId - Identifiant de l'action dans le registre
   * @param {Object} editor - Instance de l'√©diteur pour les callbacks
   * @returns {ToolbarButton|ToolbarSelect|null} - √âl√©ment d'interface cr√©√©
   */
  static createElement(actionId, editor) {
    // V√©rification de s√©curit√© : l'action existe-t-elle ?
    if (!isValidAction(actionId)) {
      console.warn(
        `üö® Action inconnue demand√©e: "${actionId}". V√©rifiez votre configuration.`
      );
      return null;
    }

    // R√©cup√©ration de la configuration de l'action
    const actionConfig = ACTIONS_REGISTRY[actionId];

    // Choix de la strat√©gie de cr√©ation selon le type d'action
    // Ceci impl√©mente le pattern Strategy au sein du pattern Factory
    switch (actionConfig.type) {
      case "toggle":
        return UIFactory.createToggleButton(actionId, actionConfig, editor);

      case "insert":
        return UIFactory.createInsertButton(actionId, actionConfig, editor);

      case "utility":
        return UIFactory.createUtilityButton(actionId, actionConfig, editor);

      case "select":
        return UIFactory.createSelectElement(actionId, actionConfig, editor);

      default:
        console.error(
          `üö® Type d'action non support√©: "${actionConfig.type}" pour l'action "${actionId}"`
        );
        return null;
    }
  }

  static createInputElement(actionId, actionConfig, editor) {
    return new ToolbarInput(
      actionId,
      actionConfig.icon,
      actionConfig.title,
      (value) => executeAction(actionId, editor, value)
    );
  }

  /**
   * Cr√©ation d'un bouton toggle (qui peut √™tre actif/inactif)
   *
   * Ces boutons changent d'apparence selon l'√©tat du formatage dans la s√©lection.
   * Par exemple, le bouton "gras" sera actif si le texte s√©lectionn√© est d√©j√† en gras.
   */
  static createToggleButton(actionId, actionConfig, editor) {
    // Cas sp√©cial pour letter-spacing avec input int√©gr√©
    if (actionId === "letter-spacing") {
      return new ToolbarButton(
        actionId,
        `${actionConfig.icon} <input type="number" class="ls-input" placeholder="0" min="-5" max="20" step="1" style="width:40px;margin-left:5px;">`,
        actionConfig.title,
        () => executeAction(actionId, editor),
        {
          isToggle: true,
          checkActive: (element) => {
            return actionConfig.isActive
              ? actionConfig.isActive(element)
              : false;
          },
        }
      );
    }

    // Cas normal pour les autres boutons
    return new ToolbarButton(
      actionId,
      actionConfig.icon,
      actionConfig.title,
      () => executeAction(actionId, editor),
      {
        isToggle: true,
        checkActive: (element) => {
          return actionConfig.isActive ? actionConfig.isActive(element) : false;
        },
      }
    );
  }

  /**
   * Cr√©ation d'un bouton d'insertion simple
   *
   * Ces boutons effectuent une action ponctuelle (ins√©rer un caract√®re, un saut de ligne...)
   * Ils n'ont pas d'√©tat actif/inactif particulier.
   */
  static createInsertButton(actionId, actionConfig, editor) {
    return new ToolbarButton(
      actionId,
      actionConfig.icon,
      actionConfig.title,
      () => executeAction(actionId, editor),
      {
        isToggle: false, // Ces boutons ne changent pas d'√©tat
      }
    );
  }

  /**
   * Cr√©ation d'un bouton utilitaire
   *
   * Ces boutons effectuent des op√©rations complexes sur le document
   * (reset, copie, export...). Ils peuvent avoir des comportements sp√©ciaux
   * comme des feedbacks visuels.
   */
  static createUtilityButton(actionId, actionConfig, editor) {
    return new ToolbarButton(
      actionId,
      actionConfig.icon,
      actionConfig.title,
      () => executeAction(actionId, editor),
      {
        isToggle: false,
        // Propri√©t√© sp√©ciale pour identifier les boutons utilitaires
        isUtility: true,
        // Certains boutons utilitaires ont des feedbacks sp√©ciaux
        hasSpecialFeedback: actionId === "copy-md",
      }
    );
  }

  /**
   * Cr√©ation d'un √©l√©ment select (menu d√©roulant)
   *
   * Ces √©l√©ments permettent de choisir parmi plusieurs options.
   * Le callback re√ßoit la valeur s√©lectionn√©e en plus de l'√©diteur.
   */
  static createSelectElement(actionId, actionConfig, editor) {
    return new ToolbarSelect(
      actionId,
      actionConfig.icon,
      actionConfig.title,
      actionConfig.options,
      (selectedValue) => executeAction(actionId, editor, selectedValue)
    );
  }

  /**
   * M√©thode utilitaire pour cr√©er plusieurs √©l√©ments √† partir d'une liste d'IDs
   *
   * @param {string[]} actionIds - Liste des identifiants d'actions
   * @param {Object} editor - Instance de l'√©diteur
   * @returns {Object[]} - Tableau d'√©l√©ments cr√©√©s (filtr√© des √©l√©ments null)
   */
  static createElements(actionIds, editor) {
    return actionIds
      .map((actionId) => UIFactory.createElement(actionId, editor))
      .filter((element) => element !== null); // Supprime les √©l√©ments qui n'ont pas pu √™tre cr√©√©s
  }

  /**
   * M√©thode de diagnostic pour analyser une configuration
   *
   * Utile pour d√©bugger et comprendre ce qui va √™tre cr√©√©
   * avant de construire effectivement la toolbar
   */
  static analyzeConfiguration(actionIds) {
    const analysis = {
      valid: [],
      invalid: [],
      byType: {
        toggle: [],
        insert: [],
        utility: [],
        select: [],
      },
    };

    actionIds.forEach((actionId) => {
      if (isValidAction(actionId)) {
        analysis.valid.push(actionId);
        const actionType = ACTIONS_REGISTRY[actionId].type;
        analysis.byType[actionType].push(actionId);
      } else {
        analysis.invalid.push(actionId);
      }
    });

    return analysis;
  }
}

/**
 * @name ToolbarButton
 * @description Classe am√©lior√©e pour les boutons de toolbar
 *
 * Cette version √©tend la classe originale avec des capacit√©s suppl√©mentaires
 * pour g√©rer les diff√©rents types de boutons cr√©√©s par la factory.
 */
export class ToolbarButton {
  constructor(command, icon, title, action, options = {}) {
    this.command = command;
    this.icon = icon;
    this.title = title;
    this.action = action;

    // Options √©tendues pour diff√©rents comportements
    this.isToggle = options.isToggle || false;
    this.isUtility = options.isUtility || false;
    this.hasSpecialFeedback = options.hasSpecialFeedback || false;
    this.checkActive = options.checkActive || null;
  }

  render() {
    // G√©n√©ration du HTML avec les attributs n√©cessaires pour le comportement
    const attributes = [
      `data-command="${this.command}"`,
      `data-tooltip="${this.title}"`,
    ];

    // Ajout d'attributs sp√©ciaux selon le type de bouton
    if (this.isToggle) {
      attributes.push('data-toggle="true"');
    }

    if (this.isUtility) {
      attributes.push('data-utility="true"');
    }

    if (this.hasSpecialFeedback) {
      attributes.push('data-special-feedback="true"');
    }

    return `<button ${attributes.join(" ")}>${this.icon}</button>`;
  }

  /**
   * V√©rifie si ce bouton doit √™tre affich√© comme actif
   * selon l'√©l√©ment actuellement s√©lectionn√©
   */
  updateActiveState(element) {
    if (this.isToggle && this.checkActive) {
      return this.checkActive(element);
    }
    return false;
  }
}

/**
 * @name ToolbarSelect
 * @description Classe pour les √©l√©ments select de la toolbar
 *
 * Cette classe g√©n√®re un menu d√©roulant personnalis√© plut√¥t qu'un <select> HTML
 * natif pour avoir un meilleur contr√¥le sur le style et le comportement.
 */
export class ToolbarSelect {
  constructor(command, icon, title, options, action) {
    this.command = command;
    this.icon = icon;
    this.title = title;
    this.options = options;
    this.action = action;
  }

  render() {
    // G√©n√©ration des options sous forme de divs personnalis√©es
    // Cela nous donne un contr√¥le total sur le style, contrairement aux <option> HTML
    const optionsHTML = this.options
      .map(
        (opt) =>
          `<div class="custom-option" data-value="${opt.value}" title="${opt.label}">${opt.label}</div>`
      )
      .join("");

    return `
      <div class="toolbar-select-wrapper" data-command="${this.command}" data-tooltip="${this.title}">
        <button class="select-trigger">${this.icon}</button>
        <div class="custom-dropdown" style="display: none;">
          ${optionsHTML}
        </div>
      </div>
    `;
  }

  /**
   * R√©cup√®re l'option correspondant √† une valeur donn√©e
   */
  getOptionByValue(value) {
    return this.options.find((option) => option.value === value);
  }
}

/**
 * @name Configuration Helpers
 * @description Fonctions utilitaires pour travailler avec les configurations
 */

/**
 * Valide une configuration de toolbar compl√®te
 * Retourne un rapport d√©taill√© sur les probl√®mes potentiels
 */
export function validateToolbarConfiguration(config) {
  const report = {
    isValid: true,
    errors: [],
    warnings: [],
    summary: null,
  };

  // V√©rification de la structure de base
  if (!config || !config.elements || !Array.isArray(config.elements)) {
    report.isValid = false;
    report.errors.push(
      "Configuration manquante ou propri√©t√© 'elements' invalide"
    );
    return report;
  }

  // Analyse des √©l√©ments
  const analysis = UIFactory.analyzeConfiguration(config.elements);

  // Erreurs bloquantes
  if (analysis.invalid.length > 0) {
    report.isValid = false;
    report.errors.push(`Actions inconnues: ${analysis.invalid.join(", ")}`);
  }

  // Avertissements informatifs
  if (analysis.valid.length === 0) {
    report.warnings.push("Aucune action valide trouv√©e dans la configuration");
  }

  if (analysis.byType.select.length > 3) {
    report.warnings.push(
      "Plus de 3 √©l√©ments select d√©tect√©s, cela peut encombrer l'interface"
    );
  }

  // R√©sum√©
  report.summary = {
    totalElements: config.elements.length,
    validElements: analysis.valid.length,
    invalidElements: analysis.invalid.length,
    distribution: analysis.byType,
  };

  return report;
}
